In this lab we will set up the below required infrastructure with KMS-Cloud Storage bucket step by step 

##Setting up a secure Cloud Storage bucket
##Managing keys and encrypted data using Key Management Service
##Viewing Cloud Storage audit logs


1. You can list the active account name with this command:
gcloud auth list

2. You can list the project ID with this command
gcloud config list project

Create a Cloud Storage Bucket in glcoud command shell :-

Pick a name for your Cloud Storage bucket, such as (eg:qwiklabs-gcp-00-28c3a8f86513-enron_corpus)

BUCKET_NAME="qwiklabs-gcp-00-28c3a8f86513-enron_corpus"

Now create the bucket by running the following command:
gsutil mb gs://${BUCKET_NAME}

In this scenario the below use case of real world treated as sample one :-
The Enron Corpus is a large database of over 600,000 emails generated by 158 employees of the Enron Corporation. This data has been copied to the Cloud Storage bucket gs://enron_emails/.

Download one of the source files locally so that you can see what it looks like by running:
gsutil cp gs://enron_emails/allen-p/inbox/1. .

Now tail the downloaded file to verify the email text is there:
tail 1.

##Enable Cloud KMS##

Run the following in your Cloud Shell session
gcloud services enable cloudkms.googleapis.com

Task 4. Create a Keyring and Cryptokey

In order to encrypt the data, you need to create a KeyRing and a CryptoKey. KeyRings are useful for grouping keys. Keys can be grouped by environment (like test, staging, and prod) or by some other conceptual grouping. For this lab, your KeyRing will be called test and your CryptoKey will be called qwiklab.

Run the following command in Cloud Shell to set environment variables:
KEYRING_NAME=test CRYPTOKEY_NAME=qwiklab

##Execute the gcloud command to create the KeyRing. For this lab you will be using a global location, but it could also be set to a specific region:

gcloud kms keyrings create $KEYRING_NAME --location global

##Next, using the new KeyRing, create a CryptoKey named qwiklab:

gcloud kms keys create $CRYPTOKEY_NAME --location global \
      --keyring $KEYRING_NAME \
      --purpose encryption

Open the Key management through the Console by going to the Navigation menu > Security > Key Management to verify the same .

##Encrypt your data
PLAINTEXT=$(cat 1. | base64 -w0)

**Base64 encoding allows binary data to be sent to the API as plaintext. This command works for images, videos, or any other kind of binary data.


Using the encrypt endpoint, you can send the base64-encoded text you want to encrypt to the specified key.

curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
  -d "{\"plaintext\":\"$PLAINTEXT\"}" \
  -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
  -H "Content-Type: application/json"

The response will be a JSON payload containing the encrypted text in the attribute ciphertext.

##Now that your data is encrypted, you can save it to a file and upload it to your Cloud Storage bucket. To grab the encrypted text from the JSON response and save it to a file, use the command-line utility jq. The response from the previous call can be piped into jq, which can parse out the ciphertext property to the file 1.encrypted. Run the following:


curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
  -d "{\"plaintext\":\"$PLAINTEXT\"}" \
  -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
  -H "Content-Type:application/json" \
| jq .ciphertext -r > 1.encrypted

To verify the encrypted data can be decrypted, call the decrypt endpoint to verify the decrypted text matches the original email. The encrypted data has information on which CryptoKey version was used to encrypt it, so the specific version is never supplied to the decrypt endpoint. Run the following:

curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:decrypt" \
  -d "{\"ciphertext\":\"$(cat 1.encrypted)\"}" \
  -H "Authorization:Bearer $(gcloud auth application-default print-access-token)"\
  -H "Content-Type:application/json" \
| jq .plaintext -r | base64 -d

Now that you have verified the text has been encrypted successfully, upload the encrypted file to your Cloud Storage bucket.

gsutil cp 1.encrypted gs://${BUCKET_NAME}

##Configure IAM permissions

In KMS, there are two major permissions to focus on. One permissions allows a user or service account to manage KMS resources, the other allows a user or service account to use keys to encrypt and decrypt data.


##To get the current authorized user, run the command below:
USER_EMAIL=$(gcloud auth list --limit=1 2>/dev/null | grep '@' | awk '{print $2}')

Next, assign that user the ability to manage KMS resources. Run the following gcloud command to assign the IAM permission to manage the KeyRing you just created:

gcloud kms keyrings add-iam-policy-binding $KEYRING_NAME \
    --location global \
    --member user:$USER_EMAIL \
    --role roles/cloudkms.admin

Without the cloudkms.cryptoKeyEncrypterDecrypter permission, the authorized user will not be able to use the keys to encrypt or decrypt data.

##Run the following gcloud command to assign the IAM permission to encrypt and decrypt data for any CryptoKey under the KeyRing you created:

gcloud kms keyrings add-iam-policy-binding $KEYRING_NAME \
    --location global \
    --member user:$USER_EMAIL \
    --role roles/cloudkms.cryptoKeyEncrypterDecrypter

**Back up data on the command line

First, copy all emails for allen-p into your current working directory:

gsutil -m cp -r gs://enron_emails/allen-p .

Now copy and paste the following into Cloud Shell to back up and encrypt all the files in the allen-p directory to your Cloud Storage bucket:

MYDIR=allen-p
FILES=$(find $MYDIR -type f -not -name "*.encrypted")
for file in $FILES; do
  PLAINTEXT=$(cat $file | base64 -w0)
  curl -v "https://cloudkms.googleapis.com/v1/projects/$DEVSHELL_PROJECT_ID/locations/global/keyRings/$KEYRING_NAME/cryptoKeys/$CRYPTOKEY_NAME:encrypt" \
    -d "{\"plaintext\":\"$PLAINTEXT\"}" \
    -H "Authorization:Bearer $(gcloud auth application-default print-access-token)" \
    -H "Content-Type:application/json" \
  | jq .ciphertext -r > $file.encrypted
done
gsutil -m cp allen-p/inbox/*.encrypted gs://${BUCKET_NAME}/allen-p/inbox

This script loops over all the files in a given directory, encrypts them using the KMS API, and uploads them to Cloud Storage.

After the script completes, you can view the encrypted files when you click Storage from the Console's left menu.

To find the files, go to Navigation menu > Cloud Storage > Buckets > YOUR_BUCKET > allen-p > inbox. You should see something like this:

**View Cloud Audit logs:-

To view the activity for any resource in KMS, go to Navigation menu > Cloud Overview > Activity tab. This will take you to the Cloud Activity UI and then click on View Log Explorer, Select Cloud KMS Key Ring as the Resource Type and you should see the creation and all modifications made to the KeyRing.


Cloud KMS is integrated with Cloud IAM and Cloud Audit Logging so that you can manage permissions on individual keys and monitor how these are used.
True
False

Ans :- True

